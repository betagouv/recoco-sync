# Generated by Django 5.1.6 on 2025-02-26 08:49
from __future__ import annotations

import functools
import uuid

import django.core.serializers.json
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
from django.db import migrations, models

import recoco_sync.main.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="WebhookConfig",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        default=recoco_sync.main.models.generate_random_code,
                        max_length=32,
                        unique=True,
                    ),
                ),
                ("api_url", models.URLField(max_length=255)),
                ("enabled", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Webhook Config",
                "verbose_name_plural": "Webhook Configs",
                "db_table": "webhookconfig",
                "ordering": ("-created",),
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, unique=True, verbose_name="email address"),
                ),
                ("first_name", models.CharField(max_length=254, verbose_name="first name")),
                ("last_name", models.CharField(max_length=254, verbose_name="last name")),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
        ),
        migrations.CreateModel(
            name="WebhookEvent",
            fields=[
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name="modified"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("webhook_uuid", models.UUIDField()),
                ("topic", models.CharField(help_text="Topic of the webhook event", max_length=32)),
                (
                    "object_id",
                    models.CharField(
                        help_text="ID of the object that triggered the webhook event", max_length=32
                    ),
                ),
                (
                    "object_type",
                    models.CharField(
                        choices=[
                            ("projects.Project", "Project"),
                            ("survey.Answer", "Answer"),
                            ("taggit.TaggedItem", "TaggedItem"),
                        ],
                        help_text="Type of the object that triggered the webhook event",
                        max_length=32,
                    ),
                ),
                (
                    "remote_ip",
                    models.GenericIPAddressField(help_text="IP address of the request client."),
                ),
                ("headers", models.JSONField(default=dict)),
                (
                    "payload",
                    models.JSONField(
                        default=dict,
                        encoder=functools.partial(
                            django.core.serializers.json.DjangoJSONEncoder,
                            *(),
                            **{"indent": 2, "sort_keys": True},
                        ),
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSED", "Processed"),
                            ("INVALID", "Invalid"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        help_text="Whether or not the webhook event has been successfully processed",
                        max_length=32,
                    ),
                ),
                ("exception", models.TextField(blank=True)),
                (
                    "traceback",
                    models.TextField(
                        blank=True,
                        help_text="Traceback if an exception was thrown during processing",
                    ),
                ),
                (
                    "webhook_config",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="main.webhookconfig",
                    ),
                ),
            ],
            options={
                "verbose_name": "Webhook Event",
                "verbose_name_plural": "Webhook Events",
                "db_table": "webhookevent",
                "ordering": ("-created",),
            },
        ),
    ]
